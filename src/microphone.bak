// Test mic and speaker

#include "Arduino.h"
#include "driver/i2s.h"

// I2S Port Numbers
#define I2S_MIC_PORT   I2S_NUM_0
#define I2S_SPEAKER_PORT I2S_NUM_1

// Microphone Pin Configuration
#define I2S_MIC_SERIAL_CLOCK  GPIO_NUM_1
#define I2S_MIC_WORD_SELECT   GPIO_NUM_2
#define I2S_MIC_SERIAL_DATA   GPIO_NUM_3

// Speaker Pin Configuration
#define I2S_SPEAKER_BIT_CLOCK   GPIO_NUM_41
#define I2S_SPEAKER_WORD_SELECT GPIO_NUM_42
#define I2S_SPEAKER_SERIAL_DATA GPIO_NUM_40

// Audio Settings
#define SAMPLE_RATE     (16000)
#define BITS_PER_SAMPLE (16)
#define BUFFER_SIZE     (1024)

void setup_microphone();
void setup_speaker();

void setup() {
  Serial.begin(115200);
  Serial.println("\n--- Starting I2S Loopback Test ---");

  // Configure and start the I2S peripherals
  setup_microphone();
  Serial.println("microphone succeded");
  setup_speaker();

  Serial.println("Setup complete. Speak into the microphone...");
}

void loop() {
  uint8_t i2s_read_buffer[BUFFER_SIZE];
  size_t bytes_read = 0;
  esp_err_t read_result = i2s_read(I2S_MIC_PORT, &i2s_read_buffer, BUFFER_SIZE, &bytes_read, portMAX_DELAY);

  if (read_result != ESP_OK) {
    Serial.printf("I2S read error: %d\n", read_result);
    return;
  }

  if (bytes_read > 0) {
    size_t bytes_written = 0;
    i2s_write(I2S_SPEAKER_PORT, &i2s_read_buffer, bytes_read, &bytes_written, portMAX_DELAY);
  }
}

void setup_microphone() {
  i2s_config_t i2s_mic_config = {
    .mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_RX),
    .sample_rate = SAMPLE_RATE,
    .bits_per_sample = I2S_BITS_PER_SAMPLE_16BIT,
    .channel_format = I2S_CHANNEL_FMT_ONLY_LEFT,
    .communication_format = I2S_COMM_FORMAT_STAND_I2S,
    .intr_alloc_flags = ESP_INTR_FLAG_LEVEL1,
    .dma_buf_count = 8,
    .dma_buf_len = 128,
    .use_apll = false,
    .tx_desc_auto_clear = false,
    .fixed_mclk = 0
  };

  i2s_pin_config_t i2s_mic_pins = {
    .bck_io_num = I2S_MIC_SERIAL_CLOCK,
    .ws_io_num = I2S_MIC_WORD_SELECT,
    .data_out_num = I2S_PIN_NO_CHANGE,
    .data_in_num = I2S_MIC_SERIAL_DATA
  };

  Serial.println("Installing microphone driver...");
  esp_err_t err = i2s_driver_install(I2S_MIC_PORT, &i2s_mic_config, 0, NULL);
  if (err != ESP_OK) {
    Serial.printf("Mic driver install failed with error: %d\n", err);
    while(1);
  }
  
  Serial.println("Setting microphone pins...");
  err = i2s_set_pin(I2S_MIC_PORT, &i2s_mic_pins);
  if (err != ESP_OK) {
    Serial.printf("Mic pin set failed with error: %d\n", err);
    while(1);
  }
  Serial.println("Microphone setup complete.");
}

void setup_speaker() {
  i2s_config_t i2s_speaker_config = {
    .mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_TX),
    .sample_rate = SAMPLE_RATE,
    .bits_per_sample = I2S_BITS_PER_SAMPLE_16BIT,
    .channel_format = I2S_CHANNEL_FMT_ONLY_LEFT,
    .communication_format = I2S_COMM_FORMAT_STAND_I2S,
    .intr_alloc_flags = ESP_INTR_FLAG_LEVEL1,
    .dma_buf_count = 8,
    .dma_buf_len = 64,
    .use_apll = false,
    .tx_desc_auto_clear = true
  };

  i2s_pin_config_t i2s_speaker_pins = {
    .bck_io_num = I2S_SPEAKER_BIT_CLOCK,
    .ws_io_num = I2S_SPEAKER_WORD_SELECT,
    .data_out_num = I2S_SPEAKER_SERIAL_DATA,
    .data_in_num = I2S_PIN_NO_CHANGE // Not used for speaker
  };
  
  Serial.println("Installing speaker driver...");
  esp_err_t err = i2s_driver_install(I2S_SPEAKER_PORT, &i2s_speaker_config, 0, NULL);
    if (err != ESP_OK) {
    Serial.printf("Speaker driver install failed with error: %d\n", err);
    while(1);
  }

  Serial.println("Setting speaker pins...");
  err = i2s_set_pin(I2S_SPEAKER_PORT, &i2s_speaker_pins);
  if (err != ESP_OK) {
    Serial.printf("Speaker pin set failed with error: %d\n", err);
    while(1);
  }

  i2s_zero_dma_buffer(I2S_SPEAKER_PORT);
  Serial.println("Speaker setup complete.");
}

